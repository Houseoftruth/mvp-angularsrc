AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mvp-sam

  SAM Template for mvp-sam
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  ParameterGroups:
      - Label:
          default: 'Domain Configuration'
        Parameters:
          - DomainName
          - HostedZoneId
          - CreateRedirect
      - Label:
          default: 'API Origin Configuration'
        Parameters:
          - ApiPath
          - ApiOriginDomainName
          - ApiOriginPath
          - ApiOriginKey
  ParameterLabels:
    CreateRedirect:
      default: 'Redirect http(s)://www.<domain> to https://domain?'

Parameters:
  DomainName:
    Type: String
    Default: 'blingoooo.s3.amazonaws.com'
    Description: Domain name to use

  ApiPath:
    Type: String
    Default: '/api'
    Description: URI path to route to API
  ApiOriginDomainName:
    Type: String
    Default: 'api.mvp.net'
    Description: API origin domain name
  ApiOriginPath:
    Type: String
    Default: '/'
    Description: API origin path
  ApiOriginKey:
    Type: String
    Default: ''
    Description: x-api-key HTTP request header sent to API
  CreateRedirect:
    Type: String
    Default: 'true'
    Description: Set to 'false' to not create the redirect CloudFront distribution
    AllowedValues:
      - 'true'
      - 'false'

  TableName:
    Type: String
    Default: 'mvpchatlog'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  TableNamea:
    Type: String
    Default: 'mvpusers'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  TableNameb:
    Type: String
    Default: 'simplechatconnections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  TableNamec:
    Type: String
    Default: 'simplechatconnectionssss'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  TableNamec:
    Type: String
    Default: 'simplechatconnectionssss'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
Conditions:
  CreateRedirect: !Not [!Equals [!Ref CreateRedirect, 'false']]

Globals:
  Function:
    Handler: index.handler
    Runtime: nodejs10.x
    MemorySize: 128 # megabytes
    Timeout: 1 # secondes
    AutoPublishAlias: live
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Service:
              - 'lambda.amazonaws.com'
              - 'edgelambda.amazonaws.com'
          Action: 'sts:AssumeRole'
Resources:

  mvpsocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mvpsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"
 
 
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref mvpsocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref mvpsocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
 
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref mvpsocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref mvpsocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref mvpsocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref mvpsocket

  mvpchatlog:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'mvp-chatlog'
      AttributeDefinitions:
      - AttributeName: "date"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "date"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableName

  mvpusers:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'mvpusers'
      AttributeDefinitions:
      - AttributeName: "date"
        AttributeType: "N"
      KeySchema:
      - AttributeName: "date"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableNamea

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableNameb


 
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - mvpsocket
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendmessage/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${mvpsocket}/*'

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - mvpsocket
      - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  mvpsocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mvpsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"

   
  mvpqr:
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: 'mvpqr'
  ProductBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref mvpqr
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${mvpqr}/* 

  ProductBucketPolicy2:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref mvpsamsrc
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${mvpsamsrc}/*


    



  DefaultIndexLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/handlers/default_index/
      Description: CloudFront origin-request default index handler

  WebSecurityLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: src/handlers/web_security/
      Description: CloudFront origin-response web security handler

  WebCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Ref DomainName

  LogBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Logs'

  WebBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref DomainName
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: 'S3/'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Web'

  WebBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Join ['/', [!GetAtt WebBucket.Arn, '*']]

  RedirectBucket:
    Type: 'AWS::S3::Bucket'
    Condition: CreateRedirect
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref WebBucket
          Protocol: https
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Redirect'

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            Compress: true
            ForwardedValues:
              Headers:
                - Accept
                - Authorization
                - Content-Type
                - Referer
              QueryString: true
            MaxTTL: 0
            MinTTL: 0
            DefaultTTL: 0
            PathPattern: !Sub '${ApiPath}*'
            TargetOriginId: api
            ViewerProtocolPolicy: https-only
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/index.html'
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: 'origin-request'
              LambdaFunctionARN: !Ref DefaultIndexLambdaFunction.Version
            - EventType: 'origin-response'
              LambdaFunctionARN: !Ref WebSecurityLambdaFunction.Version
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt LogBucket.DomainName
          IncludeCookies: false
          Prefix: 'CloudFront/'
        Origins:
          - Id: api
            DomainName: !Ref ApiOriginDomainName
            OriginPath: !Ref ApiOriginPath
            OriginCustomHeaders:
              - HeaderName: 'x-api-key'
                HeaderValue: !Ref ApiOriginKey
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - 'TLSv1.2'
          - Id: s3
            DomainName: !GetAtt WebBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  RedirectCloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Condition: CreateRedirect
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub 'www.${DomainName}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: s3
            DomainName: !Sub '${RedirectBucket}.s3-website-${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: http-only # private bucket access only works over HTTP
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'CloudFront OAI'

  WebRecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: 'Z2FDTNDATAQYW2' # CloudFront hosted zone ID
      HostedZoneId: 'Z2FDTNDATAQYW2'
      Name: !Ref DomainName
      Type: A

  WebIPV6RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: 'Z2FDTNDATAQYW2' # CloudFront hosted zone ID
      HostedZoneId: 'Z2FDTNDATAQYW2'
      Name: !Ref DomainName
      Type: AAAA

  RedirectRecordSet:
    Type: 'AWS::Route53::RecordSet'
    Condition: CreateRedirect
    Properties:
      AliasTarget:
        DNSName: !GetAtt RedirectCloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: 'Z2FDTNDATAQYW2' # CloudFront hosted zone ID
      HostedZoneId: 'Z2FDTNDATAQYW2'
      Name: !Sub 'www.${DomainName}'
      Type: A

  RedirectIPV6RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Condition: CreateRedirect
    Properties:
      AliasTarget:
        DNSName: !GetAtt RedirectCloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: 'Z2FDTNDATAQYW2' # CloudFront hosted zone ID
      HostedZoneId: 'Z2FDTNDATAQYW2'
      Name: !Sub 'www.${DomainName}'
      Type: AAAA
        
  mvpangular:
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: 'mvpangular'
  ProductBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref mvpangular
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow 
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${mvpangular}/* 

  mvpsamsrc:
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: 'mvpsamsrc'
  ProductBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref mvpsamsrc
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${mvpsamsrc}/* 


  mvpsamcf:
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: 'mvpsamcf'
  ProductBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref mvpsamcf
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${mvpsamcf}/* 

  mvpangularsrc:
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: 'mvpangularsrc'
  ProductBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref mvpangularsrc
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${mvpangularsrc}/* 

  myLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: 'myLogGroup'
        RetentionInDays: 180
        
  myLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
        LogGroupName: !Ref myLogGroup
        LogStreamName: "myLogStream" 

  createTableLog:
    Type: AWS::Logs::LogGroup
    DependsOn: [ createTable ]
    Properties:
      LogGroupName: !Sub /aws/lambda/${createTable}
      RetentionInDays: 7


  addToKitchenLogLog:
    Type: AWS::Logs::LogGroup
    DependsOn: [ addToKitchenLog ]
    Properties:
      LogGroupName: !Sub /aws/lambda/${addToKitchenLog}
      RetentionInDays: 7

  createUserLog:
    Type: AWS::Logs::LogGroup
    DependsOn: [ createUser ]
    Properties:
      LogGroupName: !Sub /aws/lambda/${createUser}
      RetentionInDays: 7       

  mvpuserpool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName : 'mvpuserpool'
      
  addToCustomerLog:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: mvp-addtocustomerlog/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /addtocustomerlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
      - AmazonS3FullAccess 

  addToAdminLog:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: mvp-addtoadminlog
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /addtoadminlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
      - AmazonS3FullAccess 
    
 
  addToKitchenLog:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: mvp-addtokitchenlog/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /addtokitchenlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess

  createUser:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: mvp-createuser/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /createuser
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess

  createTable:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: mvp-createtable/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /createtable
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess

  storeQr:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: mvp-storeqr/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /storeqr
            Method: get
      Policies:
      - AmazonS3FullAccess
          



Outputs:
  
  addToCustomerLogApi:
    Description: "API Gateway endpoint URL for Prod stage for addToCustomerLog function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

  addToCustomerLog:
    Description: "addtoCustomerLog Lambda Function ARN"
    Value: !GetAtt addToCustomerLog.Arn

  addToCustomerLogIamRole:
    Description: "Implicit IAM Role created for addToCustomerLogfunction"
    Value: !GetAtt addToCustomerLogRole.Arn

  addToAdminLogApi:
    Description: "API Gateway endpoint URL for Prod stage for addToAdminLogRole function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

  addToAdminLog:
    Description: "addToAdminLogRole Lambda Function ARN"
    Value: !GetAtt addToAdminLog.Arn

  addToAdminLogIamRole:
    Description: "Implicit IAM Role created for addToAdminLogRole function"
    Value: !GetAtt addToAdminLogRole.Arn

  addToKitchenLogApi:
    Description: "API Gateway endpoint URL for Prod stage for addToKitchenLog function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

  addToKitchenLog:
    Description: "addToKitchenLog Lambda Function ARN"
    Value: !GetAtt addToKitchenLog.Arn

  addToKitchenLogIamRole:
    Description: "Implicit IAM Role created for addToKitchenLog function"
    Value: !GetAtt addToKitchenLogRole.Arn

  createUserApi:
    Description: "API Gateway endpoint URL for Prod stage for createUser function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

  createUser:
    Description: "createUser Lambda Function ARN"
    Value: !GetAtt createUser.Arn

  createUserIamRole:
    Description: "Implicit IAM Role created for createUser function"
    Value: !GetAtt createUserRole.Arn
  
  createTableApi:
    Description: "API Gateway endpoint URL for Prod stage for createTable function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

  createTable:
    Description: "createTable Lambda Function ARN"
    Value: !GetAtt createTable.Arn

  createTableIamRole:
    Description: "Implicit IAM Role created for createTab;e function"
    Value: !GetAtt createTableRole.Arn

  storeQrApi:
    Description: "storeQr endpoint URL for Prod stage for storeQrfunction"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

  storeQr:
    Description: "storeQr Lambda Function ARN"
    Value: !GetAtt storeQr.Arn
    
  storeQrIamRole:
    Description: "Implicit IAM Role created for storeQr function"
    Value: !GetAtt storeQrRole.Arn