AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'mvp-sam

  SAM Template for mvp-sam

  '
Globals:
  Function:
    Timeout: 3
Parameters:
  TableName:
    Type: String
    Default: simplechat_connections
    Description: (Required) The name of the new DynamoDB to store connection identifiers
      for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: Required. Can be characters and underscore only. No numbers
      or special characters allowed.
Resources:
  mvpsocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mvpsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.message
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: mvpsocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: mvpsocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: mvpsocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: mvpsocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: mvpsocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: mvpsocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId:
        Ref: mvpsocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: mvpsocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
      TableName:
        Ref: TableName
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: OnConnectFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - mvpsocket
    - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: OnDisconnectFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - mvpsocket
    - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendMessageFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${mvpsocket}/*
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - mvpsocket
    - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: HelloWorldFunction
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
  mvpsrc:
    Type: AWS::S3::Bucket
  ProductBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: mvpsrcbuildangular
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${mvpsrcbuildangular}/*
  mvpangular:
    Type: AWS::S3::Bucket
  mvpsrcbuildangular:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mvp-srcbuild-angular
  myLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: myLogGroup
      RetentionInDays: 180
  myLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: myLogGroup
      LogStreamName: myLogStream
  createTableLog:
    Type: AWS::Logs::LogGroup
    DependsOn:
    - createTable
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${createTable}
      RetentionInDays: 7
  addToKitchenLogLog:
    Type: AWS::Logs::LogGroup
    DependsOn:
    - addToKitchenLog
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${addToKitchenLog}
      RetentionInDays: 7
  createUserLog:
    Type: AWS::Logs::LogGroup
    DependsOn:
    - createUser
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${createUser}
      RetentionInDays: 7
  mvpuserpool:
    Type: AWS::Cognito::UserPool
  addToCustomerLog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addToCustomerLog
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /addtocustomerlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
      - AmazonS3FullAccess
  addToAdminLog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addToAdminLog
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /addtoadminlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
      - AmazonS3FullAccess
  addToKitchenLog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addToKitchenLog
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /addtokitchenlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
  createUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: createUser
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /createuser
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
  createTable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: createTable
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /createtable
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
  storeQr:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: storeQr
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /storeqr
            Method: get
      Policies:
      - AmazonS3FullAccess
Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
      - HelloWorldFunction
      - Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - HelloWorldFunctionRole
      - Arn
  addToCustomerLogApi:
    Description: API Gateway endpoint URL for Prod stage for addToCustomerLog function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  addToCustomerLog:
    Description: addtoCustomerLog Lambda Function ARN
    Value:
      Fn::GetAtt:
      - addToCustomerLog
      - Arn
  addToCustomerLogIamRole:
    Description: Implicit IAM Role created for addToCustomerLogfunction
    Value:
      Fn::GetAtt:
      - addToCustomerLogRole
      - Arn
  addToAdminLogApi:
    Description: API Gateway endpoint URL for Prod stage for addToAdminLogRole function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  addToAdminLog:
    Description: addToAdminLogRole Lambda Function ARN
    Value:
      Fn::GetAtt:
      - addToAdminLog
      - Arn
  addToAdminLogIamRole:
    Description: Implicit IAM Role created for addToAdminLogRole function
    Value:
      Fn::GetAtt:
      - addToAdminLogRole
      - Arn
  addToKitchenLogApi:
    Description: API Gateway endpoint URL for Prod stage for addToKitchenLog function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  addToKitchenLog:
    Description: addToKitchenLog Lambda Function ARN
    Value:
      Fn::GetAtt:
      - addToKitchenLog
      - Arn
  addToKitchenLogIamRole:
    Description: Implicit IAM Role created for addToKitchenLog function
    Value:
      Fn::GetAtt:
      - addToKitchenLogRole
      - Arn
  createUserApi:
    Description: API Gateway endpoint URL for Prod stage for createUser function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  createUser:
    Description: createUser Lambda Function ARN
    Value:
      Fn::GetAtt:
      - createUser
      - Arn
  createUserIamRole:
    Description: Implicit IAM Role created for createUser function
    Value:
      Fn::GetAtt:
      - createUserRole
      - Arn
  createTableApi:
    Description: API Gateway endpoint URL for Prod stage for createTable function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  createTable:
    Description: createTable Lambda Function ARN
    Value:
      Fn::GetAtt:
      - createTable
      - Arn
  createTableIamRole:
    Description: Implicit IAM Role created for createTab;e function
    Value:
      Fn::GetAtt:
      - createTableRole
      - Arn
  storeQrApi:
    Description: storeQr endpoint URL for Prod stage for storeQrfunction
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  storeQr:
    Description: storeQr Lambda Function ARN
    Value:
      Fn::GetAtt:
      - storeQr
      - Arn
  storeQrIamRole:
    Description: Implicit IAM Role created for storeQr function
    Value:
      Fn::GetAtt:
      - storeQrRole
      - Arn
