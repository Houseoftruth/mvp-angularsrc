AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'mvp-sam

  SAM Template for mvp-sam

  '
Globals:
  Function:
    Handler: index.handler
    Runtime: nodejs10.x
    MemorySize: 128
    Timeout: 1
    AutoPublishAlias: live
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
      - Effect: Allow
        Principal:
          Service:
          - lambda.amazonaws.com
          - edgelambda.amazonaws.com
        Action: sts:AssumeRole
Parameters:
  DomainName:
    Type: String
    Default: example.com
    Description: Domain name to use
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Default: Z2FDTNDATAQYW2
    Description: HostedZoneId for the Domain
  ApiPath:
    Type: String
    Default: /api
    Description: URI path to route to API
  ApiOriginDomainName:
    Type: String
    Default: api.example.com
    Description: API origin domain name
  ApiOriginPath:
    Type: String
    Default: /
    Description: API origin path
  ApiOriginKey:
    Type: String
    Default: ''
    Description: x-api-key HTTP request header sent to API
  CreateRedirect:
    Type: String
    Default: 'true'
    Description: Set to 'false' to not create the redirect CloudFront distribution
    AllowedValues:
    - 'true'
    - 'false'
  TableName:
    Type: String
    Default: mvpchatlog
    Description: (Required) The name of the new DynamoDB to store connection identifiers
      for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: Required. Can be characters and underscore only. No numbers
      or special characters allowed.
  TableNamea:
    Type: String
    Default: mvpusers
    Description: (Required) The name of the new DynamoDB to store connection identifiers
      for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: Required. Can be characters and underscore only. No numbers
      or special characters allowed.
  TableNameb:
    Type: String
    Default: simplechatconnections
    Description: (Required) The name of the new DynamoDB to store connection identifiers
      for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: Required. Can be characters and underscore only. No numbers
      or special characters allowed.
  TableNamec:
    Type: String
    Default: simplechatconnectionssss
    Description: (Required) The name of the new DynamoDB to store connection identifiers
      for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: Required. Can be characters and underscore only. No numbers
      or special characters allowed.
ParameterLabels:
  CreateRedirect:
    default: Redirect http(s)://www.<domain> to https://domain?
Conditions:
  CreateRedirect:
    Fn::Not:
    - Fn::Equals:
      - Ref: CreateRedirect
      - 'false'
Resources:
  mvpsocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mvpsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.message
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: mvpsocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: mvpsocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: mvpsocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: mvpsocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId:
        Ref: mvpsocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: mvpsocket
  mvpchatlog:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: TableName
      AttributeDefinitions:
      - AttributeName: date
        AttributeType: N
      KeySchema:
      - AttributeName: date
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
  mvpusers:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: TableNamea
      AttributeDefinitions:
      - AttributeName: date
        AttributeType: N
      KeySchema:
      - AttributeName: date
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
      TableName:
        Ref: TableNameb
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: OnDisconnectFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - mvpsocket
    - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendMessageFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TableName
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${mvpsocket}/*
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - mvpsocket
    - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com
  mvpqr:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mvpqr
  ProductBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: mvpangularsrc
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${mvpangularsrc}/*
  ProductBucketPolicy2:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: mvpsamsrc
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${mvpsamsrc}/*
  DefaultIndexLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DefaultIndexLambdaFunction
      Description: CloudFront origin-request default index handler
  WebSecurityLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: WebSecurityLambdaFunction
      Description: CloudFront origin-response web security handler
  WebCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      SubjectAlternativeNames:
      - Fn::Sub: '*.${DomainName}'
      ValidationMethod: DNS
      Tags:
      - Key: Name
        Value:
          Ref: DomainName
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Logs
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Ref: DomainName
      LoggingConfiguration:
        DestinationBucketName:
          Ref: LogBucket
        LogFilePrefix: S3/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Web
  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebBucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            CanonicalUser:
              Fn::GetAtt:
              - CloudFrontOriginAccessIdentity
              - S3CanonicalUserId
          Action: s3:GetObject
          Resource:
            Fn::Join:
            - /
            - - Fn::GetAtt:
                - WebBucket
                - Arn
              - '*'
  RedirectBucket:
    Type: AWS::S3::Bucket
    Condition: CreateRedirect
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName:
            Ref: WebBucket
          Protocol: https
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName} Redirect
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - Ref: DomainName
        CacheBehaviors:
        - AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - PATCH
          - POST
          - DELETE
          Compress: true
          ForwardedValues:
            Headers:
            - Accept
            - Authorization
            - Content-Type
            - Referer
            QueryString: true
          MaxTTL: 0
          MinTTL: 0
          DefaultTTL: 0
          PathPattern:
            Fn::Sub: ${ApiPath}*
          TargetOriginId: api
          ViewerProtocolPolicy: https-only
        CustomErrorResponses:
        - ErrorCachingMinTTL: 0
          ErrorCode: 403
          ResponseCode: 404
          ResponsePagePath: /index.html
        - ErrorCachingMinTTL: 0
          ErrorCode: 404
          ResponseCode: 404
          ResponsePagePath: /index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
          - EventType: origin-request
            LambdaFunctionARN:
              Ref: DefaultIndexLambdaFunction.Version
          - EventType: origin-response
            LambdaFunctionARN:
              Ref: WebSecurityLambdaFunction.Version
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket:
            Fn::GetAtt:
            - LogBucket
            - DomainName
          IncludeCookies: false
          Prefix: CloudFront/
        Origins:
        - Id: api
          DomainName:
            Ref: ApiOriginDomainName
          OriginPath:
            Ref: ApiOriginPath
          OriginCustomHeaders:
          - HeaderName: x-api-key
            HeaderValue:
              Ref: ApiOriginKey
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
            OriginSSLProtocols:
            - TLSv1.2
        - Id: s3
          DomainName:
            Fn::GetAtt:
            - WebBucket
            - DomainName
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Ref: WebCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
  RedirectCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: CreateRedirect
    Properties:
      DistributionConfig:
        Aliases:
        - Fn::Sub: www.${DomainName}
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
        - Id: s3
          DomainName:
            Fn::Sub: ${RedirectBucket}.s3-website-${AWS::Region}.amazonaws.com
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Ref: WebCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFront OAI
  WebRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: DomainName
      Type: A
  WebIPV6RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: DomainName
      Type: AAAA
  RedirectRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateRedirect
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - RedirectCloudFrontDistribution
          - DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: www.${DomainName}
      Type: A
  RedirectIPV6RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateRedirect
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - RedirectCloudFrontDistribution
          - DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: www.${DomainName}
      Type: AAAA
  mvpangular:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mvpangular
  mvpsamsrc:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mvpsamsrc
  mvpsamcf:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mvpsamcf
  mvpangularsrc:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mvpangularsrc
  myLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: myLogGroup
      RetentionInDays: 180
  myLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: myLogGroup
      LogStreamName: myLogStream
  createTableLog:
    Type: AWS::Logs::LogGroup
    DependsOn:
    - createTable
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${createTable}
      RetentionInDays: 7
  addToKitchenLogLog:
    Type: AWS::Logs::LogGroup
    DependsOn:
    - addToKitchenLog
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${addToKitchenLog}
      RetentionInDays: 7
  createUserLog:
    Type: AWS::Logs::LogGroup
    DependsOn:
    - createUser
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${createUser}
      RetentionInDays: 7
  mvpuserpool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: mvpuserpool
  addToCustomerLog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addToCustomerLog
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /addtocustomerlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
      - AmazonS3FullAccess
  addToAdminLog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addToAdminLog
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /addtoadminlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
      - AmazonS3FullAccess
  addToKitchenLog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: addToKitchenLog
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /addtokitchenlogs
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
  createUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: createUser
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /createuser
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
  createTable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: createTable
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /createtable
            Method: get
      Policies:
      - AmazonDynamoDBFullAccess
  storeQr:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: storeQr
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /storeqr
            Method: get
      Policies:
      - AmazonS3FullAccess
Outputs:
  addToCustomerLogApi:
    Description: API Gateway endpoint URL for Prod stage for addToCustomerLog function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  addToCustomerLog:
    Description: addtoCustomerLog Lambda Function ARN
    Value:
      Fn::GetAtt:
      - addToCustomerLog
      - Arn
  addToCustomerLogIamRole:
    Description: Implicit IAM Role created for addToCustomerLogfunction
    Value:
      Fn::GetAtt:
      - addToCustomerLogRole
      - Arn
  addToAdminLogApi:
    Description: API Gateway endpoint URL for Prod stage for addToAdminLogRole function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  addToAdminLog:
    Description: addToAdminLogRole Lambda Function ARN
    Value:
      Fn::GetAtt:
      - addToAdminLog
      - Arn
  addToAdminLogIamRole:
    Description: Implicit IAM Role created for addToAdminLogRole function
    Value:
      Fn::GetAtt:
      - addToAdminLogRole
      - Arn
  addToKitchenLogApi:
    Description: API Gateway endpoint URL for Prod stage for addToKitchenLog function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  addToKitchenLog:
    Description: addToKitchenLog Lambda Function ARN
    Value:
      Fn::GetAtt:
      - addToKitchenLog
      - Arn
  addToKitchenLogIamRole:
    Description: Implicit IAM Role created for addToKitchenLog function
    Value:
      Fn::GetAtt:
      - addToKitchenLogRole
      - Arn
  createUserApi:
    Description: API Gateway endpoint URL for Prod stage for createUser function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  createUser:
    Description: createUser Lambda Function ARN
    Value:
      Fn::GetAtt:
      - createUser
      - Arn
  createUserIamRole:
    Description: Implicit IAM Role created for createUser function
    Value:
      Fn::GetAtt:
      - createUserRole
      - Arn
  createTableApi:
    Description: API Gateway endpoint URL for Prod stage for createTable function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  createTable:
    Description: createTable Lambda Function ARN
    Value:
      Fn::GetAtt:
      - createTable
      - Arn
  createTableIamRole:
    Description: Implicit IAM Role created for createTab;e function
    Value:
      Fn::GetAtt:
      - createTableRole
      - Arn
  storeQrApi:
    Description: storeQr endpoint URL for Prod stage for storeQrfunction
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/
  storeQr:
    Description: storeQr Lambda Function ARN
    Value:
      Fn::GetAtt:
      - storeQr
      - Arn
  storeQrIamRole:
    Description: Implicit IAM Role created for storeQr function
    Value:
      Fn::GetAtt:
      - storeQrRole
      - Arn
